generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
  extensions = [pgcrypto]
}

model User {
  id                 String              @id @default(uuid())
  email              String              @unique
  password           String
  name               String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  accounts           Account[]
  budgets            Budget[]
  categoryChangeLogs CategoryChangeLog[]
  transactions       Transaction[]
}

model Transaction {
  id                 String              @id @default(uuid())
  amount             Float
  type               String
  category           String
  description        String?
  date               DateTime            @default(now())
  userId             String
  accountId          String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  categoryChangeLogs CategoryChangeLog[]
  account            Account?            @relation(fields: [accountId], references: [id])
  user               User                @relation(fields: [userId], references: [id])
}

model Budget {
  id        String   @id @default(uuid())
  category  String
  amount    Float
  spent     Float    @default(0)
  period    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Account {
  id           String        @id @default(uuid())
  name         String
  type         String
  balance      Float
  institution  String?
  lastFour     String?
  color        String?
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
}

model CategoryChangeLog {
  id               String      @id @default(uuid())
  transactionId    String
  previousCategory String
  newCategory      String
  userId           String
  timestamp        DateTime    @default(now())
  user             User        @relation(fields: [userId], references: [id])
  transaction      Transaction @relation(fields: [transactionId], references: [id])
}
