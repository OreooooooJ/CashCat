name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Enable Corepack
        run: corepack enable
      
      - name: Install dependencies
        run: yarn install
      
      - name: Setup database directories
        run: |
          mkdir -p server/prisma
          touch server/prisma/dev.db
          chmod 777 server/prisma/dev.db
      
      - name: Generate Prisma client
        run: cd server && yarn prisma generate
      
      - name: Run Prisma migrations
        run: cd server && yarn prisma migrate deploy
        env:
          DATABASE_URL: "file:./prisma/dev.db"
      
      - name: Run linting
        run: yarn lint
      
      - name: Run tests
        run: yarn test
        env:
          DATABASE_URL: "file:./prisma/dev.db"
          JWT_SECRET: "test-jwt-secret-for-github-actions"

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Enable Corepack
        run: corepack enable
      
      - name: Install dependencies
        run: yarn install
      
      - name: Setup database directories
        run: |
          mkdir -p server/prisma
          touch server/prisma/dev.db
          chmod 777 server/prisma/dev.db
      
      - name: Generate Prisma client
        run: cd server && yarn prisma generate
      
      - name: Run Prisma migrations
        run: cd server && yarn prisma migrate deploy
        env:
          DATABASE_URL: "file:./prisma/dev.db"
      
      - name: Build
        run: yarn build
        env:
          DATABASE_URL: "file:./prisma/dev.db"
          JWT_SECRET: "test-jwt-secret-for-github-actions"
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: |
            client/dist/
            server/dist/

  deploy-preview:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    steps:
      - uses: actions/checkout@v4
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      
      # Add your preview deployment steps here
      # Example for Firebase preview:
      # - name: Deploy to Firebase Preview
      #   uses: FirebaseExtended/action-hosting-deploy@v0
      #   with:
      #     repoToken: '${{ secrets.GITHUB_TOKEN }}'
      #     firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
      #     projectId: your-project-id
      #     channelId: preview

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      
      # Add your production deployment steps here
      # Example for Firebase production:
      # - name: Deploy to Firebase Production
      #   uses: FirebaseExtended/action-hosting-deploy@v0
      #   with:
      #     repoToken: '${{ secrets.GITHUB_TOKEN }}'
      #     firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
      #     projectId: your-project-id
      #     channelId: live 